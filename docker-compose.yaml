version: "3.8"

services:
  zookeeper:
    container_name: zookeeper
    image: debezium/zookeeper:1.3
    ports:
      - "2181:2181"
    networks:
      - internal
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2181"]
      interval: 30s
      timeout: 5s
      retries: 10

  kafka:
    container_name: kafka
    image: debezium/kafka:1.3
    environment:
      ZOOKEEPER_CONNECT: "zookeeper:2181"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    links:
      - zookeeper
    networks:
      - internal
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9092"]
      interval: 30s
      timeout: 5s
      retries: 10

#  clickhouse:
#    container_name: clickhouse
#    image: yandex/clickhouse-server:20.9.3
#    ports:
#      - "8123:8123"
#    volumes:
#      - ./docker/clickhouse/log:/var/log/clickhouse-server
#      - ./docker/clickhouse/data:/var/lib/clickhouse
#      - ./docker/clickhouse/etc/clickhouse-server/users.d:/etc/clickhouse-server/users.d
#    ulimits:
#      nofile:
#        soft: 262144
#        hard: 262144
#    networks:
#      - internal
#    restart: on-failure
#    deploy:
#      mode: replicated
#      replicas: 1
#      placement:
#        max_replicas_per_node: 1
#    healthcheck:
#      test: ["CMD", "clickhouse-client", "-q", "'SELECT * FROM system.one'"]
#      interval: 30s
#      timeout: 5s
#      retries: 10

  grafana:
    container_name: grafana
    image: grafana/grafana:7.2.2-ubuntu
    environment:
      GF_INSTALL_PLUGINS: "vertamedia-clickhouse-datasource"
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "vertamedia-clickhouse-datasource"
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana/data:/var/lib/grafana
#    depends_on:
#      - clickhouse
#    links:
#      - clickhouse
    networks:
      - internal
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 10

#  metabase:
#    container_name: metabase
#    image: metabase/metabase:v0.36.6
#    ports:
#      - "3001:3000"
#    volumes:
#      - ./docker/metabase/data:/metabase.db
#      - ./docker/metabase/plugins:/plugins
#    depends_on:
#      - clickhouse
#    links:
#      - clickhouse
#    networks:
#      - internal
#    restart: on-failure
#    deploy:
#      mode: replicated
#      replicas: 1
#      placement:
#        max_replicas_per_node: 1
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:3001"]
#      interval: 30s
#      timeout: 5s
#      retries: 10

  minio:
    container_name: minio
    image: minio/minio:edge
    command: server /data
    environment:
      MINIO_ACCESS_KEY: "minio-access-key"
      MINIO_SECRET_KEY: "minio-secret-key"
    ports:
      - "9000:9000"
    volumes:
      - ./docker/minio/data:/data
    networks:
      - internal
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 1
      placement:
        max_replicas_per_node: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001"]
      interval: 30s
      timeout: 5s
      retries: 10

networks:
  internal:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.220.0/28
